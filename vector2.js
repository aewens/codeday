// Generated by CoffeeScript 1.7.1
(function() {
  var Vector2;

  Vector2 = (function() {
    function Vector2(x, y) {
      var _ref, _ref1;
      _ref = M(x, y).diverge([0, 0]), this.x = _ref[0], this.y = _ref[1];
      _ref1 = [0, 0], this.prevX = _ref1[0], this.prevY = _ref1[1];
      this;
    }

    Vector2.prototype.set = function(x, y) {
      var _ref, _ref1;
      _ref = [this.x, this.y], this.prevX = _ref[0], this.prevY = _ref[1];
      _ref1 = M(x, y).choose([x, y], [this.x, this.y]), this.x = _ref1[0], this.y = _ref1[1];
      return this;
    };

    Vector2.prototype.normalize = function() {
      var mag, norm;
      norm = new Vector2(this.x, this.y);
      mag = sqrt(sqre(norm.x) + sqre(norm.y));
      norm.x = norm.x / mag;
      norm.y = norm.y / mag;
      return norm;
    };

    Vector2.prototype.distance = function(v2) {
      if (M(v2).bool()) {
        return sqrt(sqre(v2.x - this.x) + sqre(this.y - v2.y));
      } else {
        return sqrt(sqre(this.prevX - this.x) + sqre(this.prevY - this.y));
      }
    };

    Vector2.prototype.dist = function(v2) {
      return this.distance(v2);
    };

    Vector2.prototype.changed = function() {
      if (!(this.x === this.prevX || this.y === this.prevY)) {
        return true;
      } else {
        return false;
      }
    };

    Vector2.prototype.diff2 = function(v2, invert) {
      var i;
      i = invert ? -1 : 1;
      if (M(v2).bool()) {
        return new Vector2((this.x - v2.x) * i, (this.y - v2.y) * i);
      } else {
        return new Vector2((this.x - this.prevX) * i, (this.y - this.prevY) * i);
      }
    };

    Vector2.prototype.diff = function(v2) {
      return this.diff2(v2, false);
    };

    return Vector2;

  })();

  window.Vector2 = Vector2;

}).call(this);
