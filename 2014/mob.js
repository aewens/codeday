// Generated by CoffeeScript 1.7.1
(function() {
  var Mob,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Mob = (function(_super) {
    __extends(Mob, _super);

    function Mob(x, y, unit, dmg) {
      var scale;
      scale = unit * (3 / 4);
      Mob.__super__.constructor.call(this, x, y, scale, scale, new Color(0, 0, 0));
      this.dmg = M(dmg).otherwise(1);
      this.ground = false;
      this.falling = true;
      this.sleeping = false;
      this.clock = 0;
      this.go = false;
      this.dir = 0;
      this.canHit = false;
    }

    Mob.prototype.pick = function() {
      return this.dir = round(random()) * 2 - 1;
    };

    Mob.prototype.hurt = function(player) {
      if (this.strike(player)) {
        player.damage(this.dmg);
        return this.canHit = true;
      }
    };

    Mob.prototype.sleep = function() {
      return this.color = new Color(180, 30, 30);
    };

    Mob.prototype.update = function(player, unit, canvas) {
      this.clock = (this.clock + 1) % 100;
      if (this.clock === 0) {
        this.go = !this.go;
        this.pick();
        this.canHit = false;
      }
      if (this.go) {
        this.move(this.dir * (unit / 10), 0);
        this.falling = true;
      }
      if (this.x < 0) {
        this.x = 0;
      }
      if (this.y < 0) {
        this.y = 0;
      }
      if (this.x + this.w > canvas.width) {
        this.x = canvas.width - this.w;
      }
      if (!this.canHit) {
        return this.hurt(player);
      }
    };

    return Mob;

  })(Box);

  window.Mob = Mob;

}).call(this);
