// Generated by CoffeeScript 1.7.1
(function() {
  var Player,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Player = (function(_super) {
    __extends(Player, _super);

    function Player(x, y) {
      Player.__super__.constructor.call(this, x, y, 50, 50, new Color(210, 13, 50));
      this.ground = false;
      this.jumping = false;
      this.hit = false;
    }

    Player.prototype.update = function(key, unit, canvas) {
      if (key[65]) {
        this.x = this.x - floor(sqrt(sqrt(unit)));
      }
      if (key[68]) {
        this.x = this.x + floor(sqrt(sqrt(unit)));
      }
      if ((key[87] && this.ground) || (key[32] && this.ground) || this.jumping) {
        if (this.jy === this.y || this.jy === void 0) {
          this.jy = this.y - (unit * 1.5);
        }
        this.jumping = true;
        this.ground = false;
        this.y = this.y - floor(sqrt(unit));
        if (this.hit) {
          this.jumping = false;
          this.jy = this.y;
        }
        if (this.y <= this.jy) {
          this.jumping = false;
        }
      }
      if (this.x < 0) {
        this.x = 0;
      }
      if (this.y < 0) {
        this.y = 0;
      }
      if (this.x + this.w > canvas.width) {
        this.x = canvas.width - this.w;
      }
      if (this.y + this.h > canvas.height) {
        return this.y = canvas.height - this.h;
      }
    };

    Player.prototype.onFloor = function(obj) {
      var a, b, c, d, m1, m2;
      if (!obj) {
        return false;
      }
      a = this.contains(obj.x, obj.y);
      b = this.contains(obj.x + obj.w, obj.y);
      c = obj.contains(this.x, this.y + this.h);
      d = obj.contains(this.x + this.w, this.y + this.h);
      m1 = M(a, b);
      m2 = M(c, d);
      return m1.elser(m2.elser(false));
    };

    Player.prototype.collide = function(objects) {
      var hit, o, _i, _len;
      hit = false;
      for (_i = 0, _len = objects.length; _i < _len; _i++) {
        o = objects[_i];
        hit = this.intersects(o);
        if (hit) {
          this.hit = o;
          break;
        }
      }
      return M(this.hit).otherwise(false);
    };

    return Player;

  })(Box);

  window.Player = Player;

}).call(this);
