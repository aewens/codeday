// Generated by CoffeeScript 1.7.1
(function() {
  var Code, code, darkness, end, level, mob1, physics, player, render, sy, update;

  Code = (function() {
    function Code() {
      var canvas, ctext, cwords, self;
      this.root = document.querySelector("#wrapper");
      canvas = document.createElement("canvas");
      cwords = "Your browser is bad and you should feel bad";
      ctext = document.createTextNode(cwords);
      this.root.appendChild(canvas).appendChild(ctext);
      this.canvas = canvas;
      this.ctx = this.canvas.getContext("2d");
      this.dimensions(this.root);
      self = this;
      window.addEventListener("resize", function(e) {
        return self.dimensions(self.root);
      });
    }

    Code.prototype.dimensions = function(root) {
      var h, m0, m1, r0, r1, r2, w, x, y;
      w = parseInt(window.getComputedStyle(root).width);
      h = parseInt(window.getComputedStyle(root).height);
      r0 = 32;
      r1 = 9;
      r2 = r0 * r1;
      x = max(w, h);
      y = max(r0, r1);
      this.unit = floor(x / y);
      this.canvas.width = this.unit * r0;
      this.canvas.height = this.unit * r1;
      m0 = (h - this.canvas.height) / 2;
      m1 = (w - this.canvas.width) / 2;
      return this.canvas.style.margin = "" + m0 + "px " + m1 + "px";
    };

    Code.prototype.inputs = function() {
      var self;
      this.keyState = {};
      self = this;
      document.addEventListener("keydown", function(e) {
        return self.keyState[e.keyCode] = true;
      });
      return document.addEventListener("keyup", function(e) {
        return self.keyState[e.keyCode] = false;
      });
    };

    Code.prototype.animate = function(update, render) {
      var l, rf, self;
      self = this;
      rf = function(x, y) {
        return window.requestAnimationFrame(x, y);
      };
      l = function() {
        update();
        render();
        return rf(l, self.canvas);
      };
      return rf(l, this.canvas);
    };

    return Code;

  })();

  code = new Code();

  code.inputs();

  sy = code.canvas.height - code.unit * 2;

  level = new Level(Level0, code.unit);

  darkness = new Box(0, 0, code.canvas.width, code.canvas.height, new Color(0, 0, 0, 0.5));

  mob1 = new Mob(code.unit * 17, sy, code.unit);

  player = new Player(code.unit * 2, sy, code.unit);

  end = new End(code.root, code.canvas, code.ctx);

  physics = new Physics(code, level, player, darkness, end);

  physics.addMobs(mob1);

  update = function() {
    return physics.update();
  };

  render = function() {
    return physics.render();
  };

  code.animate(update, render);

  window.Code = Code;

}).call(this);
