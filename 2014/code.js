// Generated by CoffeeScript 1.7.1
(function() {
  var Code, code, render, update;

  Code = (function() {
    function Code() {
      var canvas, ctext, cwords, self;
      this.root = document.querySelector("#wrapper");
      canvas = document.createElement("canvas");
      cwords = "Your browser is bad and you should feel bad";
      ctext = document.createTextNode(cwords);
      this.root.appendChild(canvas).appendChild(ctext);
      this.canvas = canvas;
      this.ctx = this.canvas.getContext("2d");
      this.done = false;
      this.dimensions(this.root);
      this.inputs();
      this.levelList = [Level0, Level1];
      this.levelIndex = 0;
      this.init();
      self = this;
      window.addEventListener("resize", function(e) {
        return self.dimensions(self.root);
      });
    }

    Code.prototype.init = function() {
      var mob1, mob2, mob3, mob4, mob5, mobs, sy;
      this.evpg = new EventPage(this);
      if (this.done) {
        return this.evpg.done();
      } else {
        sy = this.unit;
        this.level = new Level(this.currentLevel(), this.unit);
        if (this.levelIndex === 1) {
          this.level.mobs = false;
        }
        this.darkness = new Box(0, 0, this.canvas.width, this.canvas.height, new Color(0, 0, 0, 0.5));
        mob1 = new Mob(this.unit * 14, sy, this.unit);
        mob2 = new Mob(this.unit * 18, sy, this.unit);
        mob3 = new Mob(this.unit * 20, sy, this.unit);
        mob4 = new Mob(this.unit * 24, sy, this.unit);
        mob5 = new Mob(this.unit * 30, sy, this.unit);
        this.player = new Player(this.unit * 2, this.canvas.height - (sy * 2), this.unit);
        this.physics = new Physics(this, this.level, this.player, this.darkness, this.evpg);
        mobs = [mob1, mob2, mob3, mob4, mob5];
        if (this.level.mobs) {
          return this.physics.addMobs(mobs);
        }
      }
    };

    Code.prototype.dimensions = function(root) {
      var h, m0, m1, r0, r1, r2, w, x, y;
      w = parseInt(window.getComputedStyle(root).width);
      h = parseInt(window.getComputedStyle(root).height);
      r0 = 32;
      r1 = 9;
      r2 = r0 * r1;
      x = max(w, h);
      y = max(r0, r1);
      this.unit = floor(x / y);
      this.canvas.width = this.unit * r0;
      this.canvas.height = this.unit * r1;
      m0 = (h - this.canvas.height) / 2;
      m1 = (w - this.canvas.width) / 2;
      return this.canvas.style.margin = "" + m0 + "px " + m1 + "px";
    };

    Code.prototype.resetLevel = function() {
      return this.init();
    };

    Code.prototype.currentLevel = function() {
      return this.levelList[this.levelIndex];
    };

    Code.prototype.nextLevel = function() {
      this.levelIndex = this.levelIndex + 1;
      if (this.levelIndex === this.levelList.length) {
        return this.done = true;
      }
      return this.currentLevel();
    };

    Code.prototype.inputs = function() {
      var self;
      this.keyState = {};
      self = this;
      document.addEventListener("keydown", function(e) {
        return self.keyState[e.keyCode] = true;
      });
      document.addEventListener("keyup", function(e) {
        return self.keyState[e.keyCode] = false;
      });
      return document.addEventListener("dblclick", function(e) {
        return self.physics.win = true;
      });
    };

    Code.prototype.animate = function(update, render) {
      var l, rf, self;
      self = this;
      rf = function(x, y) {
        return window.requestAnimationFrame(x, y);
      };
      l = function() {
        update();
        render();
        return rf(l, self.canvas);
      };
      return rf(l, this.canvas);
    };

    return Code;

  })();

  code = new Code();

  update = function() {
    if (code.physics.you.dead) {
      if (!M(code.evpg.text).bool()) {
        code.evpg.set("end");
      }
      code.evpg.update();
      return;
    }
    if (code.physics.win) {
      if (!M(code.evpg.text).bool()) {
        code.evpg.set("win");
      }
      code.evpg.update();
    } else {
      return code.physics.update();
    }
  };

  render = function() {
    if (code.physics.you.dead) {
      if (!M(code.evpg.text).bool()) {
        code.evpg.set("end");
      }
      code.evpg.render();
      return;
    }
    if (code.physics.win) {
      if (!M(code.evpg.text).bool()) {
        code.evpg.set("win");
      }
      code.evpg.render();
    } else {
      return code.physics.render();
    }
  };

  code.animate(update, render);

  window.Code = Code;

}).call(this);
