// Generated by CoffeeScript 1.7.1
(function() {
  var Box;

  Box = (function() {
    function Box(x, y, w, h, color, solid, win) {
      var _ref;
      _ref = M(x, y, w, h).diverge([0, 0, 0, 0]), this.x = _ref[0], this.y = _ref[1], this.w = _ref[2], this.h = _ref[3];
      this.color = M(color).otherwise({
        value: "#000"
      });
      this.solid = M(solid).otherwise(1);
      this.win = M(win).otherwise(0);
    }

    Box.prototype.move = function(dx, dy) {
      this.x = this.x + dx;
      this.y = this.y + dy;
      return this;
    };

    Box.prototype.strike = function(obj) {
      var a, b, c, d, m, m1, m2, n, o, p;
      a = this.contains(obj.x, obj.y);
      b = this.contains(obj.x + obj.w, obj.y);
      c = this.contains(obj.x, obj.y + obj.h);
      d = this.contains(obj.x + obj.w, obj.y + obj.h);
      m1 = M(a, b, c, d);
      m = obj.contains(this.x, this.y);
      n = obj.contains(this.x + this.w, this.y);
      o = obj.contains(this.x, this.y + this.h);
      p = obj.contains(this.x + this.w, this.y + this.h);
      m2 = M(m, n, o, p);
      this.hit = m1.elser(m2.elser(false));
      return this.hit;
    };

    Box.prototype.collide = function(obj) {
      var a, b, c, d, floor, ignore, m, m1, m2, m3, n, o, p;
      ignore = false;
      if (obj.solid === 0) {
        ignore = true;
      }
      a = this.contains(obj.x, obj.y);
      b = this.contains(obj.x + obj.w, obj.y);
      c = this.contains(obj.x, obj.y + obj.h);
      d = this.contains(obj.x + obj.w, obj.y + obj.h);
      m1 = M(a, b, c, d);
      m = obj.contains(this.x, this.y);
      n = obj.contains(this.x + this.w, this.y);
      o = obj.contains(this.x, this.y + this.h);
      p = obj.contains(this.x + this.w, this.y + this.h);
      m2 = M(m, n, o, p);
      m3 = M(a, b, o, p);
      this.hit = m1.elser(m2.elser(false));
      floor = m3.elser(false);
      return [ignore, this.hit, floor];
    };

    Box.prototype.contains = function(x, y) {
      if (x >= this.x && x <= this.x + this.w && y >= this.y && y <= this.y + this.h) {
        return true;
      } else {
        return false;
      }
    };

    Box.prototype.update = function(unit, canvas) {};

    Box.prototype.render = function(ctx) {
      ctx.fillStyle = this.color.value;
      return ctx.fillRect(this.x, this.y, this.w, this.h);
    };

    return Box;

  })();

  window.Box = Box;

}).call(this);
