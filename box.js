// Generated by CoffeeScript 1.7.1
(function() {
  var Box,
    __slice = [].slice;

  Box = (function() {
    function Box(x, y, w, h) {
      var _ref;
      _ref = M(x, y, w, h).diverge([0, 0, 0, 0]), this.x = _ref[0], this.y = _ref[1], this.w = _ref[2], this.h = _ref[3];
    }

    Box.prototype.intersects = function(shape) {
      var m1, m2, offset;
      offset = M(shape.radius).otherwise(0);
      m1 = M(this.contains(shape.x - offset, shape.y - offset), this.contains(shape.x + shape.w - offset, shape.y - offset), this.contains(shape.x - offset, shape.y + shape.h - offset), this.contains(shape.x + shape.w - offset, shape.y + shape.h - offset));
      m2 = M(shape.contains(this.x - offset, this.y - offset), shape.contains(this.x + this.w - offset, this.y - offset), shape.contains(this.x, this.y - offset + this.h - offset), shape.contains(this.x + this.w - offset, this.y + this.h - offset));
      return m1.elser(m2.elser(false));
    };

    Box.prototype.move = function(dx, dy) {
      this.x = this.x + dx;
      this.y = this.y + dy;
      return this;
    };

    Box.prototype.contains = function(x, y) {
      if (x >= this.x && x <= this.x + this.w && y >= this.y && y <= this.y + this.h) {
        return true;
      } else {
        return false;
      }
    };

    Box.prototype.render = function() {
      var color, colors, ctx;
      ctx = arguments[0], colors = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      switch (colors.length) {
        case 1:
          color = colors[0];
          break;
        case 3:
          color = "hsl(" + colors[0] + "," + colors[1] + "," + colors[2] + ")";
          break;
        case 4:
          color = "hsla(" + colors[0] + "," + colors[1] + ", " + colors[2] + "," + colors[3] + ")";
          break;
        default:
          color = "#fff";
      }
      ctx.fillStyle = color;
      return ctx.fillRect(this.x, this.y, this.w, this.h);
    };

    return Box;

  })();

  window.Box = Box;

}).call(this);
