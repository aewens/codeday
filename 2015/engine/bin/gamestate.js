// Generated by CoffeeScript 1.7.1
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(["state", "pappai", "vector", "player", "ai", "block", "map", "level", "energy", "universe"], function(State, Pappai, Vector, Player, AI, Block, Map, Level, Energy, Universe) {
    var GameState;
    GameState = (function(_super) {
      __extends(GameState, _super);

      function GameState(game) {
        GameState.__super__.constructor.call(this, game);
        this.w = this.game.canvas.ctx.width;
        this.h = this.game.canvas.ctx.height;
        this.level = new Level(27, 12, 40);
        this.map = this.level.start();
        this.time = 0;
        this.energy = new Energy();
        this.universe = new Universe(this.energy);
        this.load();
      }

      GameState.prototype.lvlup = function() {
        if (this.level.current + 1 === this.level.max) {
          return;
        }
        this.map = this.level.next();
        this.energy.E = this.energy.reset;
        this.health = Pappai.Text().set(20, 20);
        this.atLevel = Pappai.Text().set(this.map.w * this.map.size - 20, 20);
        return this.load();
      };

      GameState.prototype.load = function() {
        var ai, aix, aiy, i, _i, _ref;
        this.ais = [];
        this.mobs = pow(2, this.level.current);
        this.dead_ais = [];
        for (i = _i = 0, _ref = this.mobs; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
          aix = floor(random() * 800) + 100;
          aiy = floor(random() * 200);
          ai = new AI(aix, aiy, 20, this.mobs, "#f00");
          this.ais.push(ai);
        }
        this.player = new Player(60, this.h - 200, 20, this.mobs, "#00f");
        this.health = Pappai.Text().set(20, 20);
        this.atLevel = Pappai.Text().set(20, 40);
        return this.enLeft = Pappai.Text().set(20, 60);
      };

      GameState.prototype.handleInputs = function(input) {
        if (input.isDown("left")) {
          this.player.move(-1, 0);
        }
        if (input.isDown("right")) {
          this.player.move(1, 0);
        }
        if (input.isPressed("spacebar")) {
          if (this.player.canJump) {
            this.player.move(0, -40);
          }
        }
        if (input.isDown("pulse")) {
          if (!this.player.dead) {
            this.player.pulsate = true;
            this.player.pulsing = this.player.pulsing + 0.001;
          }
        } else {
          this.player.pulsate = false;
          this.player.pulsing = 0;
        }
        if (input.isPressed("skip")) {
          return this.lvlup();
        }
      };

      GameState.prototype.update = function() {
        var i, j, others, _i, _j, _ref, _ref1;
        this.time = (this.time + 1) % 10000;
        this.energy.update(this.time);
        this.universe.update(this.time, this.ais, this.player);
        this.map.update(this.player);
        this.player.update(this.map, this.energy);
        for (i = _i = 0, _ref = this.mobs; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
          if (this.ais[i].dead) {
            continue;
          }
          others = [];
          for (j = _j = 0, _ref1 = this.mobs; 0 <= _ref1 ? _j < _ref1 : _j > _ref1; j = 0 <= _ref1 ? ++_j : --_j) {
            if (i !== j) {
              others.push(this.ais[j]);
            }
          }
          this.ais[i].update(this.map, this.player, others);
          if (this.ais[i].dead) {
            this.dead_ais.push(this.ais[i]);
          }
        }
        if (this.dead_ais.length === this.ais.length) {
          return this.lvlup();
        }
      };

      GameState.prototype.render = function(ctx) {
        var i, life, _i, _ref;
        ctx.clear();
        this.player.render();
        for (i = _i = 0, _ref = this.mobs; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
          this.ais[i].render();
        }
        this.map.render();
        if (this.player.pulsate && this.energy.E > this.energy.low) {
          this.player.pulsar.set(this.player.logic.x, this.player.logic.y);
          this.player.pulsar.render();
        }
        life = floor(this.player.health);
        life = life > 0 ? life : "Dead";
        this.health.render("HP: " + life);
        this.atLevel.render("Level: " + floor(this.level.current + 1));
        return this.enLeft.render("Energy: " + floor(this.energy.E));
      };

      return GameState;

    })(State);
    return GameState;
  });

}).call(this);
