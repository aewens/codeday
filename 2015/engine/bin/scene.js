// Generated by CoffeeScript 1.7.1
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(["map"], function(Map) {
    var Scene;
    Scene = (function(_super) {
      __extends(Scene, _super);

      function Scene(sw, sh, w, h, size) {
        this.sw = sw;
        this.sh = sh;
        this.w = w;
        this.h = h;
        this.size = size;
        Scene.__super__.constructor.call(this, w, h, size);
        this.row(11, "platform");
        this.fromR(4, 7, 5, "platform");
        this.viewable = [0, 0, this.w * this.size, this.h * this.size];
        this;
      }

      Scene.prototype.getAll = function() {
        var self;
        self = this;
        return this.blocks.filter(function(block) {
          var logic, side;
          if (block === null) {
            return false;
          }
          logic = block.logic;
          side = block.real.side;
          if (logic.x < self.viewable[0]) {
            return false;
          }
          if (logic.y < self.viewable[1]) {
            return false;
          }
          if (logic.x + side > self.viewable[2]) {
            return false;
          }
          if (logic.y + side > self.viewable[3]) {
            return false;
          }
          return true;
        });
      };

      Scene.prototype.camera = function(player) {
        if (player.logic.x > (this.w * this.size) / 2) {
          this.viewable[0] = player.logic.x - (this.w * this.size) / 2;
          player.frozen.x = true;
          player.logic.x = player.logic.x - player.velocity.x;
        } else {
          this.viewable[0] = 0;
          player.frozen.x = false;
        }
        if (player.logic.y < (this.h * this.size) / 2) {
          this.viewable[1] = player.logic.y - (this.h * this.size) / 2;
          return player.frozen.y = true;
        } else {
          this.viewable[1] = 0;
          return player.frozen.y = false;
        }
      };

      Scene.prototype.update = function(player) {
        this.camera(player);
        return this.world = this.getAll();
      };

      Scene.prototype.render = function() {
        var blocks, i, _i, _ref, _results;
        blocks = this.getAll();
        _results = [];
        for (i = _i = 0, _ref = blocks.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
          _results.push(blocks[i].real.render());
        }
        return _results;
      };

      return Scene;

    })(Map);
    return Scene;
  });

}).call(this);
