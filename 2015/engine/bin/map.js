// Generated by CoffeeScript 1.7.1
(function() {
  define(["block"], function(Block) {
    var Map;
    Map = (function() {
      function Map(w, h, size) {
        var i, _i, _ref;
        this.w = w;
        this.h = h;
        this.size = size;
        this.world = [];
        this.blocks = [];
        this.objects = [];
        this.length = this.w * this.h;
        for (i = _i = 0, _ref = this.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
          this.blocks.push(null);
        }
        this;
      }

      Map.prototype.use = function(object) {
        return this.objects.push(object);
      };

      Map.prototype.fill = function(x, y) {
        var block, color;
        color = "#" + floor(random() * 999);
        block = new Block(x * this.size, y * this.size, this.size, color);
        block.real.give("type", "block");
        return block;
      };

      Map.prototype.locate = function(key, block) {
        return this.blocks[key] = block ? this.fill(key % this.width, Math.floor(key / this.w)) : null;
      };

      Map.prototype.select = function(x, y, block) {
        return this.blocks[x + y * this.w] = block ? this.fill(x, y) : null;
      };

      Map.prototype.row = function(r, block) {
        var x, _i, _ref, _results;
        _results = [];
        for (x = _i = 0, _ref = this.w; 0 <= _ref ? _i < _ref : _i > _ref; x = 0 <= _ref ? ++_i : --_i) {
          _results.push(this.blocks[x + r * this.w] = block ? this.fill(x, r) : null);
        }
        return _results;
      };

      Map.prototype.col = function(c, block) {
        var y, _i, _ref, _results;
        _results = [];
        for (y = _i = 0, _ref = this.h; 0 <= _ref ? _i < _ref : _i > _ref; y = 0 <= _ref ? ++_i : --_i) {
          _results.push(this.blocks[c + y * this.w] = block ? this.fill(c, y) : null);
        }
        return _results;
      };

      Map.prototype.fromR = function(x, y, to, block) {
        var i, _i, _results;
        _results = [];
        for (i = _i = 0; 0 <= to ? _i < to : _i > to; i = 0 <= to ? ++_i : --_i) {
          _results.push(this.blocks[(x + i) + y * this.w] = block ? this.fill(x + i, y) : null);
        }
        return _results;
      };

      Map.prototype.fromD = function(x, y, to, block) {
        var i, _i, _results;
        _results = [];
        for (i = _i = 0; 0 <= to ? _i < to : _i > to; i = 0 <= to ? ++_i : --_i) {
          _results.push(this.blocks[x + (y + i) * this.w] = block ? this.fill(x, y + i) : null);
        }
        return _results;
      };

      Map.prototype.getAll = function() {
        return this.blocks.filter(function(x) {
          return x !== null;
        });
      };

      Map.prototype.update = function() {
        var blocks;
        blocks = this.getAll();
        return this.world = this.objects.concat(blocks);
      };

      Map.prototype.render = function() {
        var blocks, i, _i, _ref, _results;
        blocks = this.getAll();
        _results = [];
        for (i = _i = 0, _ref = blocks.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
          _results.push(blocks[i].real.render());
        }
        return _results;
      };

      return Map;

    })();
    return Map;
  });

}).call(this);
